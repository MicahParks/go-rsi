package rsi_test

import (
	"log"
	"math/big"
	"os"
	"testing"

	"github.com/MicahParks/go-rsi"
)

func BenchmarkBigRSI_Calculate(b *testing.B) {
	const initialLength = rsi.DefaultPeriods + 1

	r, _ := rsi.NewBig(bigPrices[:initialLength])

	for _, next := range bigPrices[initialLength:] {
		r.Calculate(next)
	}
}

func BenchmarkRSI_Calculate(b *testing.B) {
	const initialLength = rsi.DefaultPeriods + 1

	r, _ := rsi.New(prices[0:initialLength])

	for _, next := range prices[initialLength:] {
		r.Calculate(next)
	}
}

func ExampleRSI_Calculate() {
	// Create a logger.
	logger := log.New(os.Stdout, "", 0)

	// Create the RSI data structure and get the first result.
	//
	// The slice argument should be the number of periods
	const initialLength = rsi.DefaultPeriods + 1
	r, result := rsi.New(prices[0:initialLength])
	logger.Printf("Period index: %d\nFirst RSI result: %.8f", rsi.DefaultPeriods, result)

	// Use the remaining data to generate the RSI for each period.
	for _, next := range prices[initialLength:] {
		result = r.Calculate(next)
	}
	logger.Printf("Period index: %d\nLast RSI result: %.8f", len(prices)-1, result)
	// Output: Period index: 14
	// First RSI result: 72.36421725
	// Period index: 166
	// Last RSI result: 37.34374224
}

func TestBigRSI_Calculate(t *testing.T) {
	const initialLength = rsi.DefaultPeriods + 1

	r, result := rsi.NewBig(bigPrices[:initialLength])
	if result.Cmp(bigResults[0]) != 0 {
		t.FailNow()
	}

	for i, next := range bigPrices[initialLength:] {
		result = r.Calculate(next)
		if result.Cmp(bigResults[i+1]) != 0 {
			t.FailNow()
		}
	}
}

func TestRSI_Calculate(t *testing.T) {
	const initialLength = rsi.DefaultPeriods + 1

	r, result := rsi.New(prices[0:initialLength])
	if result != results[0] {
		t.FailNow()
	}

	for i, next := range prices[initialLength:] {
		result = r.Calculate(next)
		if result != results[i+1] {
			t.FailNow()
		}
	}
}

func TestBigRSI_Invalid(t *testing.T) {
	r, result := rsi.NewBig(nil)
	if r != nil || result != nil {
		t.FailNow()
	}
}

func TestRSI_Invalid(t *testing.T) {
	r, result := rsi.New(nil)
	if r != nil || result != 0 {
		t.FailNow()
	}
}

func floatToBig(s []float64) (b []*big.Float) {
	l := len(s)
	b = make([]*big.Float, l)
	for i := 0; i < l; i++ {
		b[i] = big.NewFloat(s[i])
	}
	return b
}

var (
	bigPrices  = floatToBig(prices)
	bigResults = floatToBig(results)
	prices     = []float64{
		88.55,
		88.96,
		87.93,
		88.48,
		88.14,
		89.1,
		89.61,
		89.58,
		89.53,
		89.47,
		90.2,
		90.8,
		90.92,
		90.7,
		91.35,
		91.73,
		91.11,
		91.76,
		90.67,
		89.97,
		90.04,
		89.15,
		89.74,
		89.79,
		88.25,
		88.61,
		88.28,
		88.46,
		88.67,
		88.52,
		88.36,
		89.32,
		88.97,
		88.59,
		89.2,
		87.7,
		88.51,
		89.53,
		89.55,
		89.43,
		88.95,
		89.61,
		89.56,
		88.71,
		88.97,
		89.16,
		89.16,
		89.26,
		89.83,
		89.37,
		88.77,
		88.58,
		88.63,
		88.17,
		89.29,
		89.02,
		90.13,
		90.58,
		90.11,
		90.77,
		90.58,
		89.93,
		89.77,
		89.01,
		88.6,
		88.77,
		88.68,
		89.22,
		88.99,
		86.49,
		86.61,
		86.08,
		86.62,
		87.45,
		88.09,
		89.3,
		89.43,
		88.07,
		88,
		88.21,
		88.99,
		87.51,
		88.63,
		90.02,
		90.58,
		91.15,
		91.7,
		91.03,
		90.14,
		90.1,
		91.11,
		91.24,
		90.7,
		91.76,
		92.52,
		92.8,
		92.19,
		91.79,
		91.53,
		92.38,
		92.08,
		92.09,
		90.47,
		91.46,
		90.79,
		89.65,
		90.23,
		91.45,
		91.12,
		90.46,
		89.74,
		91.33,
		90.58,
		91.51,
		91.93,
		91,
		89.05,
		89.48,
		88.48,
		89.11,
		89.8,
		90.04,
		90.35,
		90.3,
		90.64,
		90.69,
		91.57,
		92.25,
		93.34,
		92.82,
		93.27,
		93.4,
		93.25,
		93.3,
		93.46,
		94.38,
		95.17,
		94.83,
		95.2,
		94.99,
		94.97,
		94.79,
		94.03,
		93.81,
		93.75,
		92.73,
		91.95,
		91.59,
		91.47,
		91.34,
		91.78,
		90.72,
		89.89,
		89.4,
		88.95,
		88.16,
		87.91,
		86.92,
		86.83,
		86.42,
		86.98,
		87.52,
		87.09,
		86.82,
		88.84,
		87.27,
		87.16,
	}
	results = []float64{
		72.36421725239623015113465953618288040161132812500,
		74.05997693194935038718540454283356666564941406250,
		66.85220483413692704743880312889814376831054687500,
		70.13392792714788015473459381610155105590820312500,
		59.49650209930549493719809106551110744476318359375,
		53.84798951579623604857260943390429019927978515625,
		54.31507914768538114458351628854870796203613281250,
		47.70441856222932131004199618473649024963378906250,
		51.88513226122601906808995408937335014343261718750,
		52.23363827029182004935137229040265083312988281250,
		42.11535487927940835106710437685251235961914062500,
		44.80693633023408040116919437423348426818847656250,
		42.84043542606477217304927762597799301147460937500,
		44.27700479297108415721595520153641700744628906250,
		45.98270230770441457934794016182422637939453125000,
		44.92488376868042365686051198281347751617431640625,
		43.76826711040049389112027711234986782073974609375,
		51.78853291793669910703101777471601963043212890625,
		49.04216675921485091294016456231474876403808593750,
		46.17885754633900319277017842978239059448242187500,
		51.11311585011414848622735007666051387786865234375,
		41.12800816489130539821417187340557575225830078125,
		47.13388269577535538701340556144714355468750000000,
		53.55884226908488443541500600986182689666748046875,
		53.67771915686585515459228190593421459197998046875,
		52.80434570118169546049102791585028171539306640625,
		49.34574578714600789908217848278582096099853515625,
		53.82424072424835514993901597335934638977050781250,
		53.43877707811076049893017625436186790466308593750,
		47.24450319236687789725692709907889366149902343750,
		49.18479341136264082479101489298045635223388671875,
		50.61423271473989160540440934710204601287841796875,
		50.61423271473988449997705174610018730163574218750,
		51.44790575424983103403064887970685958862304687500,
		56.00660525942230094642582116648554801940917968750,
		51.78116042111749806053921929560601711273193359375,
		46.81938613254978065469913417473435401916503906250,
		45.33784691804491018274347879923880100250244140625,
		45.82369213011979525163042126223444938659667968750,
		42.11500214933612085133063374087214469909667968750,
		52.24855708462988701512585976161062717437744140625,
		49.97713629285671999014084576629102230072021484375,
		58.05111524271458023349623545072972774505615234375,
		60.81258265615276314974835258908569812774658203125,
		56.62019987031404610888785100542008876800537109375,
		60.71578810781209512015266227535903453826904296875,
		58.98917354042886529441602760925889015197753906250,
		53.39496666304241045963863143697381019592285156250,
		52.08555908257530120408773655071854591369628906250,
		46.27997475707561392255229293368756771087646484375,
		43.46531206180392103988197050057351589202880859375,
		44.96003647943255998598033329471945762634277343750,
		44.29237946922328461596407578326761722564697265625,
		49.16974167856584898572691599838435649871826171875,
		47.27134435321612215830100467428565025329589843750,
		32.55724485497356113228306639939546585083007812500,
		33.62522872456337097446521511301398277282714843750,
		31.26998240648629234783584251999855041503906250000,
		36.17525082033900929445735528133809566497802734375,
		42.91865978528071678965716273523867130279541015625,
		47.52279084366808348249833215959370136260986328125,
		54.92526321542292322419598349370062351226806640625,
		55.64911724860040465046040480956435203552246093750,
		47.12333797770608612154319416731595993041992187500,
		46.72652750314765057737531606107950210571289062500,
		48.13746179051918971936174784786999225616455078125,
		53.10542506163260867424469324760138988494873046875,
		44.41223736089831675144523615017533302307128906250,
		50.95519582110640754990527057088911533355712890625,
		57.62198921999431178164741140790283679962158203125,
		59.98211954189517314262047875672578811645507812500,
		62.28454850878468818109467974863946437835693359375,
		64.41222461251919639835250563919544219970703125000,
		59.97365040352647724830603692680597305297851562500,
		54.59212862334961613441919325850903987884521484375,
		54.35605513519478648731819703243672847747802734375,
		59.15852524251353372619632864370942115783691406250,
		59.74561080619992026186082512140274047851562500000,
		56.13587378573461705855152104049921035766601562500,
		61.10378361342542063994187628850340843200683593750,
		64.23169865173213111120276153087615966796875000000,
		65.33764677636509077274240553379058837890625000000,
		60.91846487295106271631084382534027099609375000000,
		58.14144461591340729000876308418810367584228515625,
		56.34351745609001227421686053276062011718750000000,
		60.62982991715479386130027705803513526916503906250,
		58.44862534452428803888324182480573654174804687500,
		58.50221714797357464021843043155968189239501953125,
		47.75630287639128113141850917600095272064208984375,
		53.39071199497411157608439680188894271850585937500,
		49.49987639274083761620204313658177852630615234375,
		43.66862910653001250693705515004694461822509765625,
		47.08410567765293563979867030866444110870361328125,
		53.47425292984723910194588825106620788574218750000,
		51.65709166975666022381119546480476856231689453125,
		48.13406475870112899428931996226310729980468750000,
		44.56348757743649713347622309811413288116455078125,
		52.87673281423685267554901656694710254669189453125,
		49.13386537769238771033997181802988052368164062500,
		53.52674491309722526466430281288921833038330078125,
		55.40003941176207291618993622250854969024658203125,
		50.54187042968276699639318394474685192108154296875,
		42.18799852794345639495077193714678287506103515625,
		44.37149462775733610442330245859920978546142578125,
		40.53704747325650714628864079713821411132812500000,
		43.83030717971909240304739796556532382965087890625,
		47.27454455761413498748879646882414817810058593750,
		48.45839222492051590052142273634672164916992187500,
		50.01942445978338014356268104165792465209960937500,
		49.75766229621439151742379181087017059326171875000,
		51.61204367429233030861723818816244602203369140625,
		51.89324093739617183018708601593971252441406250000,
		56.66630123268223684362965286709368228912353515625,
		59.97131355988052803240861976519227027893066406250,
		64.62830522892326712280919309705495834350585937500,
		60.98323333742712293314980342984199523925781250000,
		62.93164405165115482532200985588133335113525390625,
		63.49873494220744163385461433790624141693115234375,
		62.31414356497017337233046418987214565277099609375,
		62.56483911581793222467240411788225173950195312500,
		63.40379467170008354059973498806357383728027343750,
		67.86353778710031292575877159833908081054687500000,
		71.11830823557873770823789527639746665954589843750,
		67.92957838565115480378153733909130096435546875000,
		69.53063680317060857305477838963270187377929687500,
		67.47177637189972188025421928614377975463867187500,
		67.26748441372444631269900128245353698730468750000,
		65.34969942807623510816483758389949798583984375000,
		57.85030568475448831122776027768850326538085937500,
		55.85220816100923713065640185959637165069580078125,
		55.29131365670868802908444195054471492767333984375,
		46.70448112293730957844672957435250282287597656250,
		41.40851871208760570652884780429303646087646484375,
		39.19921080273221747347633936442434787750244140625,
		38.46254917960087027495319489389657974243164062500,
		37.63735416132757904961181338876485824584960937500,
		42.16046599492975843759268173016607761383056640625,
		35.48352650149870157747500343248248100280761718750,
		31.30313647135980659186316188424825668334960937500,
		29.12185488847960357361444039270281791687011718750,
		27.24426761600005875152419321238994598388671875000,
		24.28418463313560948790836846455931663513183593750,
		23.41710390754519721667747944593429565429687500000,
		20.32257458897356627858243882656097412109375000000,
		20.06300760276685934968554647639393806457519531250,
		18.87997125587740754326659953221678733825683593750,
		25.35431304855745793247479014098644256591796875000,
		31.06754296943068993641645647585391998291015625000,
		29.15401532944198947916447650641202926635742187500,
		27.98832103494609668814518954604864120483398437500,
		45.53442427378082157929384266026318073272705078125,
		37.82105167168070636307675158604979515075683593750,
		37.34374224244366047287257970310747623443603515625,
	}
)
